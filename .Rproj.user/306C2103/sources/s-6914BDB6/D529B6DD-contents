# from shape to geojson
library(rgdal)
library(spdplyr)
library(geojsonio)
library(rmapshaper)
library(tidyverse)
library(highcharter)
library(magrittr)



# fijar locale
Sys.setlocale(locale = "es_ES.UTF-8")

# cargar mapa
mapa <- readOGR(dsn = "/Users/rafalopezv/Downloads/municipal/",
                layer = "municipal", verbose = FALSE)

# modificar "dbf"
mapa@data  %>% head
mapa@data  %<>% dplyr::rename(DEPARTAMENTO = DEPARTAMEN)
mapa@data$num <- 1:nrow(mapa@data)



# cambiar nombre de capital por name
mapa %<>% dplyr::rename(name = CAPITAL) # posible gracias a la libreria spdplyr

# create the geosonfile
bol.geoson <- geojson_json(mapa)

# simplify it
bol.geoson <- ms_simplify(bol.geoson)

# export it
dir.create("/Users/rafalopezv/Dropbox/MAPAS/geoson/")
geojson_write(bol.geoson, 
              file = "/Users/rafalopezv/Dropbox/MAPAS/geoson/municipios.339.geojson")


# mapa a nivel departamental
dptal <- readOGR(dsn = "Dropbox/MAPAS/departamentos/",
                layer = "departamento", verbose = FALSE)

# modificar "dbf"
View(dptal@data)


# create the geosonfile
dptal <- geojson_json(dptal)

# simplify it
dptal <- ms_simplify(dptal)

# export it
geojson_write(dptal, 
              file = "Dropbox/MAPAS/geoson/departamentos.geojson")



#------------
# prueba
bol <- jsonlite::fromJSON("/Users/rafalopezv/Dropbox/MAPAS/geoson/municipios.339.geojson", 
                          simplifyVector = F)


a <- jsonlite::fromJSON(bol.geoson)

# mapeo sin datos adicionales
highchart(type = "map") %>%
  hc_add_series(mapData = bol.geoson, showInLegend = T, nullColor = "darkblue",
                borderWidth = 0.3,borderColor = "transparent", 
                value = "id") %>%
  hc_colorAxis(dataClasses = color_classes(c(seq(0, 10, by = 2), 50))) %>%
  hc_legend(layout = "vertical", align = "right",
            floating = TRUE, valueDecimals = 0, valueSuffix = "%") 


# a√±adir datos
mun <- get_data_from_map(bol)
mun$objectid %>% unique %>% length()

data_fake <- mun %>% 
  select(code = objectid) %>% 
  mutate(value = 1:344)

# intentar el milagro
highchart(type = "map") %>%
  hc_add_series(mapData = bol, data = data_fake, value = "value", 
                joinBy = c("objectid", "code"), name = "prueba",
                borderWidth = 0.1,borderColor = "transparent", 
                nullColor = "black") %>%
  hc_colorAxis(dataClasses = color_classes(c(0, 200, 344))) %>% # poner los cortes para mostrar en el mapa
  hc_legend(layout = "vertical", align = "right",
            floating = TRUE, valueDecimals = 0, valueSuffix = "%") %>%
  hc_mapNavigation(enabled = TRUE) #%>%
  #hc_add_series(mapData = dptal, borderWidth = 0.5,borderColor = "black",nullColor = "transparent") 



hcmap("countries/us/us-all", data = data_fake, value = "value",
      joinBy = c("hc-a2", "code"), name = "Fake data",
      dataLabels = list(enabled = TRUE, format = '{point.name}'),
      borderColor = "#FAFAFA", borderWidth = 0.1,
      tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) 

htmlwidgets::saveWidget(exterior1, "exterior1")
htmlwidgets::saveWidget(exterior2, "exterior2")
htmlwidgets::saveWidget(exterior3, "exterior3")
htmlwidgets::saveWidget(exterior4, "exterior4")
exterior1
exterior2
exterior3
exterior4
